const { PrismaClient } = require('@prisma/client');

console.log('üîç DIAGN√ìSTICO DE PROBLEMA EN RAILWAY');
console.log('=====================================\n');

async function diagnose() {
  try {
    console.log('1. Verificando variables de entorno...');
    console.log('   DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Configurada' : '‚ùå No configurada');
    console.log('   NODE_ENV:', process.env.NODE_ENV || 'No definida');
    console.log('   PORT:', process.env.PORT || 'No definida');
    
    console.log('\n2. Verificando conexi√≥n a base de datos...');
    const prisma = new PrismaClient();
    
    try {
      await prisma.$connect();
      console.log('   ‚úÖ Conexi√≥n a base de datos exitosa');
      
      // Verificar si hay datos
      const clinicaCount = await prisma.clinica.count();
      const patientCount = await prisma.patient.count();
      
      console.log(`   üìä Cl√≠nicas en BD: ${clinicaCount}`);
      console.log(`   üìä Pacientes en BD: ${patientCount}`);
      
      if (patientCount > 10000) {
        console.log('   ‚ö†Ô∏è ADVERTENCIA: Muchos pacientes pueden causar problemas de rendimiento');
        console.log('   üí° SOLUCI√ìN: Implementar paginaci√≥n (ya hecho)');
      }
      
    } catch (dbError) {
      console.log('   ‚ùå Error de conexi√≥n a BD:', dbError.message);
    } finally {
      await prisma.$disconnect();
    }
    
    console.log('\n3. Verificando configuraci√≥n de la aplicaci√≥n...');
    console.log('   ‚úÖ Paginaci√≥n implementada en pacientes');
    console.log('   ‚úÖ Logs de debug comentados');
    console.log('   ‚úÖ Endpoint de health check disponible');
    
    console.log('\n4. Posibles causas del healthcheck fallido:');
    console.log('   - La aplicaci√≥n puede estar tardando en iniciar');
    console.log('   - Puede haber un error en el startup');
    console.log('   - El endpoint /health puede no estar respondiendo');
    console.log('   - Problemas de memoria con muchos pacientes');
    
    console.log('\n5. Soluciones recomendadas:');
    console.log('   ‚úÖ Paginaci√≥n implementada (reduce carga)');
    console.log('   ‚úÖ Logs optimizados (reduce rate limit)');
    console.log('   üîÑ Reiniciar el servicio en Railway');
    console.log('   üîÑ Verificar logs de Railway para errores espec√≠ficos');
    
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error.message);
  }
}

diagnose();
