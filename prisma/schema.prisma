generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinica {
  id                  String             @id @default(cuid())
  name                String
  address             String?
  phone               String?
  email               String?
  logo                String?
  colorPrimario       String?            @default("#3B82F6")
  colorSecundario     String?            @default("#1E40AF")
  estado              String?            @default("activo")
  estadoPago          String?            @default("pagado")
  fechaCreacion       DateTime           @default(now())
  ultimoPago          DateTime?
  proximoPago         DateTime?
  descripcion         String?
  contacto            String?
  rating              Float?             @default(4.5)
  stats               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  url                 String             @unique @map("slug")
  fuente              String?            @default("owner_dashboard")
  pendienteAprobacion Boolean            @default(false)
  conversations       Conversation[]
  especialidades      Especialidad[]
  horarios            Horario[]
  mensajes            Mensaje[]
  notificaciones      Notificacion[]
  sucursales          Sucursal[]
  turnos              Turno[]
  users               User[]
  whatsappMessages    WhatsAppMessage[]
  whatsappTemplates   WhatsAppTemplate[]
}

model Mensaje {
  id        String   @id @default(cuid())
  asunto    String
  mensaje   String
  tipo      String
  leido     Boolean  @default(false)
  clinicaId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinica   Clinica? @relation(fields: [clinicaId], references: [id])
}

model Conversation {
  id            String        @id @default(cuid())
  name          String
  role          String
  avatar        String?
  stage         String        @default("prospectos")
  tags          String[]      @default([])
  isOnline      Boolean       @default(false)
  phone         String?
  email         String?
  unreadCount   Int           @default(0)
  clinicaId     String
  lastMessageAt DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  messages      ChatMessage[]
  clinica       Clinica       @relation(fields: [clinicaId], references: [id])
  turnos        Turno[]

  @@index([clinicaId])
  @@index([stage])
  @@index([lastMessageAt(sort: Desc)])
}

model ChatMessage {
  id                String           @id @default(cuid())
  content           String
  isFromUser        Boolean          @default(false)
  messageType       String           @default("text")
  status            String           @default("sent")
  conversationId    String
  userId            String?
  whatsappMessageId String?
  metadata          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  conversation      Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user              User?            @relation(fields: [userId], references: [id])
  whatsappMessage   WhatsAppMessage? @relation(fields: [whatsappMessageId], references: [id])

  @@index([conversationId])
  @@index([createdAt(sort: Desc)])
  @@index([status])
}

model Notificacion {
  id               String    @id @default(cuid())
  titulo           String
  mensaje          String
  tipo             String    @default("info")
  prioridad        String    @default("media")
  leida            Boolean   @default(false)
  clinicaId        String
  destinatarioId   String?
  fechaVencimiento DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  clinica          Clinica   @relation(fields: [clinicaId], references: [id])
  destinatario     User?     @relation("UserNotifications", fields: [destinatarioId], references: [id])
}

model User {
  id               String                  @id @default(cuid())
  email            String                  @unique
  password         String
  name             String?
  phone            String?
  location         String?
  bio              String?
  role             Role
  clinicaId        String?
  estado           String?                 @default("activo")
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  avatar_url       String?
  configuracion    String?
  facebook         String?
  instagram        String?
  website          String?
  whatsapp         String?
  chatMessages     ChatMessage[]
  notificaciones   Notificacion[]          @relation("UserNotifications")
  patient          Patient?
  professional     Professional?
  pushTokens       PushNotificationToken[]
  clinica          Clinica?                @relation(fields: [clinicaId], references: [id])
  whatsappMessages WhatsAppMessage[]
}

model Turno {
  id             String        @id @default(cuid())
  paciente       String
  email          String
  telefono       String?
  doctor         String
  fecha          DateTime
  hora           String
  estado         String        @default("pendiente")
  motivo         String?
  clinicaId      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  duracionMin    Int           @default(30)
  notas          String?
  professionalId String?
  servicio       String?
  conversationId String?
  ate            String?
  estadoPago     String        @default("pendiente")
  medioPago      String?
  montoTotal     String?
  origen         String?
  sucursal       String?
  clinica        Clinica       @relation(fields: [clinicaId], references: [id])
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  professional   Professional? @relation(fields: [professionalId], references: [id])
}

model Patient {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  birthDate DateTime?
  phone     String?
  notes     String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

model Professional {
  id                 String   @id @default(uuid())
  userId             String   @unique
  name               String
  specialties        String[]
  defaultDurationMin Int      @default(30)
  bufferMin          Int      @default(10)
  notes              String?
  createdAt          DateTime @default(now())
  tratamientos       String[] @default([])
  agendas            Agenda[]
  user               User     @relation(fields: [userId], references: [id])
  turnos             Turno[]
}

model Agenda {
  id             String       @id @default(uuid())
  professionalId String
  dia            String
  horaInicio     String
  horaFin        String
  duracionMin    Int
  createdAt      DateTime     @default(now())
  professional   Professional @relation(fields: [professionalId], references: [id])
}

model Horario {
  id        Int     @id @default(autoincrement())
  day       String
  openTime  String
  closeTime String
  clinicaId String
  clinica   Clinica @relation(fields: [clinicaId], references: [id])
}

model Especialidad {
  id        Int     @id @default(autoincrement())
  name      String
  clinicaId String
  clinica   Clinica @relation(fields: [clinicaId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model PushNotificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  platform  String
  deviceId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([platform])
}

model WhatsAppMessage {
  id             String        @id @default(cuid())
  phoneNumberId  String
  to             String
  from           String
  messageType    String
  messageText    String?
  templateName   String?
  templateParams String?
  mediaUrl       String?
  mediaId        String?
  wamid          String?
  status         String        @default("pending")
  errorCode      String?
  errorMessage   String?
  clinicaId      String?
  userId         String?
  metadata       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  chatMessages   ChatMessage[]
  clinica        Clinica?      @relation(fields: [clinicaId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])

  @@index([to])
  @@index([status])
  @@index([clinicaId])
  @@index([userId])
  @@index([wamid])
}

model WhatsAppTemplate {
  id         String   @id @default(cuid())
  name       String
  language   String   @default("es")
  category   String
  status     String   @default("pending")
  components String
  example    String?
  clinicaId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  clinica    Clinica? @relation(fields: [clinicaId], references: [id])

  @@index([name])
  @@index([status])
  @@index([clinicaId])
}

model Contacto {
  id           String   @id @default(cuid())
  nombre       String
  email        String
  telefono     String?
  empresa      String?
  tipoConsulta String
  plan         String?
  mensaje      String
  estado       String   @default("nuevo")
  procesado    Boolean  @default(false)
  notas        String?
  metadata     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([estado])
  @@index([tipoConsulta])
  @@index([createdAt(sort: Desc)])
  @@index([email])
}

model WhatsAppWebhook {
  id        String   @id @default(cuid())
  eventType String
  payload   String
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([processed])
}

model Sucursal {
  id          String   @id @default(cuid())
  nombre      String
  direccion   String?
  telefono    String?
  email       String?
  estado      String   @default("activa")
  clinicaId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clinica     Clinica  @relation(fields: [clinicaId], references: [id], onDelete: Cascade)

  @@index([clinicaId])
  @@index([estado])
}

enum Role {
  PATIENT
  PROFESSIONAL
  ADMIN
  OWNER
  SECRETARY
}
