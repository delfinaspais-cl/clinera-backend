generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agenda {
  id             String       @id
  professionalId String
  dia            String
  horaInicio     String
  horaFin        String
  duracionMin    Int
  createdAt      DateTime     @default(now())
  Professional   Professional @relation(fields: [professionalId], references: [id])
}

model ArchivoMedico {
  id                 String      @id
  fichaMedicaId      String
  nombre             String
  nombreArchivo      String
  tipo               String
  url                String
  tama_oBytes        BigInt?     @map("tama√±oBytes")
  fechaSubida        DateTime    @default(now())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime
  microserviceFileId String?
  FichaMedica        FichaMedica @relation(fields: [fichaMedicaId], references: [id], onDelete: Cascade)

  @@index([fichaMedicaId])
}

model ChatMessage {
  id                String           @id
  content           String
  isFromUser        Boolean          @default(false)
  messageType       String           @default("text")
  status            String           @default("sent")
  conversationId    String
  userId            String?
  whatsappMessageId String?
  metadata          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  Conversation      Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User              User?            @relation(fields: [userId], references: [id])
  WhatsAppMessage   WhatsAppMessage? @relation(fields: [whatsappMessageId], references: [id])

  @@index([conversationId])
  @@index([createdAt(sort: Desc)])
  @@index([status])
}

model Clinica {
  id                                 String                 @id
  name                               String
  address                            String?
  phone                              String?
  email                              String?
  logo                               String?
  colorPrimario                      String?                @default("#3B82F6")
  colorSecundario                    String?                @default("#1E40AF")
  estado                             String?                @default("activo")
  estadoPago                         String?                @default("trial")
  fechaCreacion                      DateTime               @default(now())
  ultimoPago                         DateTime?
  proximoPago                        DateTime?
  descripcion                        String?
  contacto                           String?
  rating                             Float?                 @default(4.5)
  stats                              String?
  createdAt                          DateTime               @default(now())
  updatedAt                          DateTime
  slug                               String                 @unique
  fuente                             String?                @default("owner_dashboard")
  pendienteAprobacion                Boolean                @default(false)
  mensapiServiceEmail                String?
  mensapiServicePassword             String?
  administradorId                    String?
  defaultLanguage                    String?                @default("es")
  User_Clinica_administradorIdToUser User?                  @relation("Clinica_administradorIdToUser", fields: [administradorId], references: [id])
  Conversation                       Conversation[]
  Especialidad                       Especialidad[]
  FichaMedica                        FichaMedica[]
  FichaMedicaHistorial               FichaMedicaHistorial[]
  Horario                            Horario[]
  MedioPago                          MedioPago[]
  Mensaje                            Mensaje[]
  Notificacion                       Notificacion[]
  Sucursal                           Sucursal[]
  Suscripcion                        Suscripcion?
  Tratamiento                        Tratamiento[]
  Turno                              Turno[]
  User_User_clinicaIdToClinica       User[]                 @relation("User_clinicaIdToClinica")
  Venta                              Venta[]
  WhatsAppMessage                    WhatsAppMessage[]
  WhatsAppTemplate                   WhatsAppTemplate[]

  @@index([defaultLanguage])
}

model Contacto {
  id           String   @id
  nombre       String
  email        String
  telefono     String?
  empresa      String?
  tipoConsulta String
  plan         String?
  mensaje      String
  estado       String   @default("nuevo")
  procesado    Boolean  @default(false)
  notas        String?
  metadata     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([createdAt(sort: Desc)])
  @@index([email])
  @@index([estado])
  @@index([tipoConsulta])
}

model Conversation {
  id            String        @id
  name          String
  role          String
  avatar        String?
  stage         String        @default("prospectos")
  tags          String[]      @default([])
  isOnline      Boolean       @default(false)
  phone         String?
  email         String?
  unreadCount   Int           @default(0)
  clinicaId     String
  lastMessageAt DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  ChatMessage   ChatMessage[]
  Clinica       Clinica       @relation(fields: [clinicaId], references: [id])
  Turno         Turno[]

  @@index([clinicaId])
  @@index([lastMessageAt(sort: Desc)])
  @@index([stage])
}

model EmailVerification {
  id         String    @id
  email      String
  code       String
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  verified   Boolean   @default(false)
  verifiedAt DateTime?
  attempts   Int       @default(0)
  ipAddress  String?
  userAgent  String?

  @@index([code])
  @@index([email])
  @@index([expiresAt])
}

model EmailVerificationLimit {
  id           String    @id
  email        String
  ipAddress    String
  attempts     Int       @default(1)
  lastAttempt  DateTime  @default(now())
  blockedUntil DateTime?

  @@unique([email, ipAddress])
  @@index([email])
  @@index([ipAddress])
}

model Especialidad {
  id                       Int                        @id @default(autoincrement())
  name                     String
  clinicaId                String
  Clinica                  Clinica                    @relation(fields: [clinicaId], references: [id])
  ProfessionalEspecialidad ProfessionalEspecialidad[]
}

model FichaMedica {
  id                           String                 @id
  pacienteId                   String                 @unique
  clinicaId                    String
  grupoSanguineo               String?
  alergias                     String?
  medicamentosActuales         String?
  antecedentesPatologicos      String?
  antecedentesQuirurgicos      String?
  antecedentesFamiliares       String?
  habitos                      String?
  ocupacion                    String?
  motivoConsulta               String?
  sintomas                     String?
  diagnostico                  String?
  tratamiento                  String?
  evolucion                    String?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime
  tratamientosEsteticosPrevios String?
  ArchivoMedico                ArchivoMedico[]
  Clinica                      Clinica                @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  Patient                      Patient                @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  FichaMedicaHistorial         FichaMedicaHistorial[]
  ImagenMedica                 ImagenMedica[]

  @@index([clinicaId])
  @@index([pacienteId])
}

model FichaMedicaArchivo {
  id                   String               @id
  fichaHistorialId     String
  tipo                 String
  nombre               String
  url                  String
  descripcion          String?
  fechaSubida          DateTime             @default(now())
  microserviceFileId   String?
  FichaMedicaHistorial FichaMedicaHistorial @relation(fields: [fichaHistorialId], references: [id], onDelete: Cascade)

  @@index([fichaHistorialId])
  @@index([tipo])
}

model FichaMedicaHistorial {
  id                           String               @id
  pacienteId                   String
  clinicaId                    String
  version                      Int
  fechaCreacion                DateTime             @default(now())
  creadoPor                    String?
  grupoSanguineo               String?
  ocupacion                    String?
  alergias                     String?
  medicamentosActuales         String?
  antecedentesPatologicos      String?
  antecedentesQuirurgicos      String?
  antecedentesFamiliares       String?
  habitos                      String?
  motivoConsulta               String?
  sintomas                     String?
  diagnostico                  String?
  tratamiento                  String?
  evolucion                    String?
  notasCambio                  String?
  esVersionActual              Boolean              @default(false)
  createdAt                    DateTime             @default(now())
  tratamientosEsteticosPrevios String?
  FichaMedicaArchivo           FichaMedicaArchivo[]
  Clinica                      Clinica              @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  User                         User?                @relation(fields: [creadoPor], references: [id])
  FichaMedica                  FichaMedica          @relation(fields: [pacienteId], references: [pacienteId], onDelete: Cascade, map: "FichaMedicaHistorial_fichaMedica_fkey")
  Patient                      Patient              @relation(fields: [pacienteId], references: [id], onDelete: Cascade)

  @@index([clinicaId])
  @@index([esVersionActual])
  @@index([fechaCreacion])
  @@index([pacienteId])
  @@index([version])
}

model HistorialPago {
  id               String      @id
  suscripcionId    String
  planId           String
  monto            Float
  moneda           String      @default("USD")
  estado           String      @default("pending")
  metodoPago       String?
  idPagoExterno    String?
  fechaPago        DateTime?
  fechaVencimiento DateTime?
  notas            String?
  metadata         Json?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime
  Plan             Plan        @relation(fields: [planId], references: [id])
  Suscripcion      Suscripcion @relation(fields: [suscripcionId], references: [id], onDelete: Cascade)

  @@index([estado])
  @@index([fechaPago])
  @@index([suscripcionId])
}

model Horario {
  id        Int     @id @default(autoincrement())
  day       String
  openTime  String
  closeTime String
  clinicaId String
  Clinica   Clinica @relation(fields: [clinicaId], references: [id])
}

model ImagenMedica {
  id                 String      @id
  fichaMedicaId      String
  nombre             String
  nombreArchivo      String
  url                String
  descripcion        String?
  tama_oBytes        BigInt?     @map("tama√±oBytes")
  fechaSubida        DateTime    @default(now())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime
  microserviceFileId String?
  FichaMedica        FichaMedica @relation(fields: [fichaMedicaId], references: [id], onDelete: Cascade)

  @@index([fichaMedicaId])
}

model MedioPago {
  id          String   @id
  nombre      String
  descripcion String?
  activo      Boolean  @default(true)
  clinicaId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Clinica     Clinica  @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  Venta       Venta[]

  @@unique([nombre, clinicaId])
  @@index([activo])
  @@index([clinicaId])
}

model Mensaje {
  id        String   @id
  asunto    String
  mensaje   String
  tipo      String
  leido     Boolean  @default(false)
  clinicaId String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Clinica   Clinica? @relation(fields: [clinicaId], references: [id])
}

model Notificacion {
  id               String    @id
  titulo           String
  mensaje          String
  tipo             String    @default("info")
  prioridad        String    @default("media")
  leida            Boolean   @default(false)
  clinicaId        String
  destinatarioId   String?
  fechaVencimiento DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  Clinica          Clinica   @relation(fields: [clinicaId], references: [id])
  User             User?     @relation(fields: [destinatarioId], references: [id])
}

model PasswordResetToken {
  id        String   @id
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model Patient {
  id                   String                 @id
  userId               String                 @unique
  name                 String
  birthDate            DateTime?
  phone                String?
  notes                String?
  createdAt            DateTime               @default(now())
  FichaMedica          FichaMedica?
  FichaMedicaHistorial FichaMedicaHistorial[]
  User                 User                   @relation(fields: [userId], references: [id])
}

model Plan {
  id              String          @id
  nombre          String          @unique
  tagline         String?
  descripcion     String
  precio          Float
  moneda          String          @default("USD")
  intervalo       String          @default("monthly")
  activo          Boolean         @default(true)
  popular         Boolean         @default(false)
  caracteristicas String[]        @default([])
  limitaciones    Json?
  orden           Int             @default(0)
  icono           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  HistorialPago   HistorialPago[]
  Suscripcion     Suscripcion[]

  @@index([activo])
  @@index([orden])
  @@index([popular])
}

model Professional {
  id                       String                     @id
  userId                   String                     @unique
  name                     String
  defaultDurationMin       Int                        @default(30)
  bufferMin                Int                        @default(10)
  notes                    String?
  createdAt                DateTime                   @default(now())
  sucursalId               String?
  Agenda                   Agenda[]
  Sucursal                 Sucursal?                  @relation(fields: [sucursalId], references: [id])
  User                     User                       @relation(fields: [userId], references: [id])
  ProfessionalEspecialidad ProfessionalEspecialidad[]
  ProfessionalTratamiento  ProfessionalTratamiento[]
  Turno                    Turno[]
}

model ProfessionalEspecialidad {
  id             String       @id
  professionalId String
  especialidadId Int
  createdAt      DateTime     @default(now())
  Especialidad   Especialidad @relation(fields: [especialidadId], references: [id], onDelete: Cascade)
  Professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@unique([professionalId, especialidadId])
  @@index([especialidadId])
  @@index([professionalId])
}

model ProfessionalTratamiento {
  id             String       @id
  professionalId String
  tratamientoId  String
  precio         Float?
  duracionMin    Int?
  createdAt      DateTime     @default(now())
  Professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  Tratamiento    Tratamiento  @relation(fields: [tratamientoId], references: [id], onDelete: Cascade)

  @@unique([professionalId, tratamientoId])
  @@index([professionalId])
  @@index([tratamientoId])
}

model PushNotificationToken {
  id        String   @id
  userId    String
  token     String   @unique
  platform  String
  deviceId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([platform])
  @@index([token])
  @@index([userId])
}

model Sucursal {
  id           String         @id
  nombre       String
  direccion    String?
  telefono     String?
  email        String?
  estado       String         @default("activa")
  clinicaId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  ciudad       String?
  pais         String?
  provincia    String?
  Professional Professional[]
  Clinica      Clinica        @relation(fields: [clinicaId], references: [id], onDelete: Cascade)

  @@index([clinicaId])
  @@index([estado])
}

model Suscripcion {
  id                String          @id
  clinicaId         String          @unique
  planId            String
  estado            String          @default("trial")
  fechaInicio       DateTime        @default(now())
  fechaFin          DateTime?
  fechaTrialFin     DateTime?
  ultimoPago        DateTime?
  proximoPago       DateTime?
  metodoPago        String?
  idPagoExterno     String?
  trialDias         Int             @default(7)
  autoRenovar       Boolean         @default(true)
  canceladoEn       DateTime?
  motivoCancelacion String?
  notas             String?
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  HistorialPago     HistorialPago[]
  Clinica           Clinica         @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  Plan              Plan            @relation(fields: [planId], references: [id])

  @@index([autoRenovar])
  @@index([estado])
  @@index([fechaFin])
  @@index([fechaTrialFin])
}

model Tratamiento {
  id                      String                    @id
  name                    String
  descripcion             String?
  duracionMin             Int                       @default(30)
  precio                  Float?
  clinicaId               String
  estado                  String                    @default("activo")
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  ProfessionalTratamiento ProfessionalTratamiento[]
  Clinica                 Clinica                   @relation(fields: [clinicaId], references: [id], onDelete: Cascade)

  @@index([clinicaId])
  @@index([estado])
}

model Turno {
  id             String        @id
  paciente       String
  email          String
  telefono       String?
  doctor         String
  fecha          DateTime
  hora           String
  estado         String        @default("pendiente")
  motivo         String?
  clinicaId      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  conversationId String?
  duracionMin    Int           @default(30)
  notas          String?
  professionalId String?
  servicio       String?
  ate            String?
  estadoPago     String        @default("pendiente")
  medioPago      String?
  montoTotal     String?
  origen         String?
  sucursal       String?
  montoAbonado   String?
  montoPendiente String?
  Clinica        Clinica       @relation(fields: [clinicaId], references: [id])
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  Professional   Professional? @relation(fields: [professionalId], references: [id])
}

model User {
  id                                    String                  @id
  email                                 String
  password                              String
  name                                  String?
  phone                                 String?
  location                              String?
  bio                                   String?
  role                                  Role
  clinicaId                             String?
  estado                                String?                 @default("activo")
  createdAt                             DateTime                @default(now())
  updatedAt                             DateTime
  avatar_url                            String?
  configuracion                         String?
  facebook                              String?
  instagram                             String?
  website                               String?
  whatsapp                              String?
  username                              String?                 @unique
  ChatMessage                           ChatMessage[]
  Clinica_Clinica_administradorIdToUser Clinica[]               @relation("Clinica_administradorIdToUser")
  FichaMedicaHistorial                  FichaMedicaHistorial[]
  Notificacion                          Notificacion[]
  Patient                               Patient?
  Professional                          Professional?
  PushNotificationToken                 PushNotificationToken[]
  Clinica_User_clinicaIdToClinica       Clinica?                @relation("User_clinicaIdToClinica", fields: [clinicaId], references: [id])
  WhatsAppMessage                       WhatsAppMessage[]

  @@unique([email, clinicaId])
  @@index([clinicaId])
  @@index([email])
  @@index([username])
}

model Venta {
  id               String     @id
  ventaId          String     @unique
  comprador        String
  paciente         String
  email            String
  telefono         String
  tratamiento      String
  profesional      String
  profesionalId    String?
  sucursal         String
  montoTotal       String
  montoAbonado     String
  montoPendiente   String
  estado           String     @default("activa")
  estadoPago       String     @default("pendiente")
  medioPago        String?
  origen           String?
  ate              String?
  sesiones         Int        @default(1)
  sesionesUsadas   Int        @default(0)
  fechaCreacion    DateTime   @default(now())
  fechaVencimiento DateTime?
  notas            String?
  clinicaId        String
  medioPagoId      String?
  Clinica          Clinica    @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  MedioPago        MedioPago? @relation(fields: [medioPagoId], references: [id])

  @@index([clinicaId])
  @@index([estadoPago])
  @@index([estado])
  @@index([fechaCreacion])
  @@index([medioPagoId])
}

model WhatsAppMessage {
  id             String        @id
  phoneNumberId  String
  to             String
  from           String
  messageType    String
  messageText    String?
  templateName   String?
  templateParams String?
  mediaUrl       String?
  mediaId        String?
  wamid          String?
  status         String        @default("pending")
  errorCode      String?
  errorMessage   String?
  clinicaId      String?
  userId         String?
  metadata       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  ChatMessage    ChatMessage[]
  Clinica        Clinica?      @relation(fields: [clinicaId], references: [id])
  User           User?         @relation(fields: [userId], references: [id])

  @@index([clinicaId])
  @@index([status])
  @@index([to])
  @@index([userId])
  @@index([wamid])
}

model WhatsAppTemplate {
  id         String   @id
  name       String
  language   String   @default("es")
  category   String
  status     String   @default("pending")
  components String
  example    String?
  clinicaId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Clinica    Clinica? @relation(fields: [clinicaId], references: [id])

  @@index([clinicaId])
  @@index([name])
  @@index([status])
}

model WhatsAppWebhook {
  id        String   @id
  eventType String
  payload   String
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([processed])
}

enum Role {
  PATIENT
  PROFESSIONAL
  ADMIN
  OWNER
  SECRETARY
}
