generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:aSPDfaHHYgfhWDBJiDifWdhsijEpMODT@gondola.proxy.rlwy.net:12288/railway"
}

enum Role {
  PATIENT
  PROFESSIONAL
  ADMIN
  OWNER
  SECRETARY
}

model Clinica {
  id              String    @id @default(cuid())
  name            String
  url             String    @unique @map("slug")
  address         String?
  phone           String?
  email           String?
  logo            String?
  colorPrimario   String?   @default("#3B82F6")
  colorSecundario String?   @default("#1E40AF")
  estado          String?   @default("activa")
  estadoPago      String?   @default("pagado")
  fechaCreacion   DateTime  @default(now())
  ultimoPago      DateTime?
  proximoPago     DateTime?
  descripcion     String?
  contacto        String? // JSON object
  rating          Float?    @default(4.5)
  stats           String? // JSON object
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  users          User[]
  mensajes       Mensaje[]
  turnos         Turno[]
  horarios       Horario[]
  especialidades Especialidad[]
}

model Mensaje {
  id        String   @id @default(cuid())
  asunto    String
  mensaje   String
  tipo      String // "pago" | "soporte" | "general"
  leido     Boolean  @default(false)
  clinicaId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clinica Clinica @relation(fields: [clinicaId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  location  String?
  bio       String?
  role      Role
  clinicaId String?
  estado    String?  @default("activo")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clinica      Clinica?      @relation(fields: [clinicaId], references: [id])
  patient      Patient?
  professional Professional?
}

model Turno {
  id           String   @id @default(cuid())
  paciente     String
  email        String
  telefono     String?
  especialidad String
  doctor       String
  fecha        DateTime
  hora         String
  estado       String   @default("pendiente") // "pendiente" | "confirmado" | "cancelado"
  motivo       String?
  clinicaId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  clinica Clinica @relation(fields: [clinicaId], references: [id])
}

model Patient {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  birthDate DateTime?
  phone     String?
  notes     String?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Professional {
  id                 String   @id @default(uuid())
  userId             String   @unique
  name               String
  specialties        String[]
  defaultDurationMin Int      @default(30)
  bufferMin          Int      @default(10)
  notes              String? // üëà AGREG√Å ESTA L√çNEA
  createdAt          DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  agendas Agenda[]
}

model Agenda {
  id             String   @id @default(uuid())
  professionalId String
  dia            String // Ej: "LUNES", "MARTES"
  horaInicio     String // "08:00"
  horaFin        String // "12:00"
  duracionMin    Int
  createdAt      DateTime @default(now())

  professional Professional @relation(fields: [professionalId], references: [id])
}

model Horario {
  id        Int     @id @default(autoincrement())
  day       String
  openTime  String
  closeTime String
  clinicaId String
  clinica   Clinica @relation(fields: [clinicaId], references: [id])
}

model Especialidad {
  id        Int     @id @default(autoincrement())
  name      String
  clinicaId String
  clinica   Clinica @relation(fields: [clinicaId], references: [id])
}

// model Admin {
//   id        String   @id @default(uuid())
//   userId    String   @unique
//   clinicId  String?
//   user      User     @relation(fields: [userId], references: [id])
// }
