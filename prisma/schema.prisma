generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinica {
  id                     String                 @id @default(cuid())
  name                   String
  address                String?
  phone                  String?
  email                  String?
  logo                   String?
  colorPrimario          String?                @default("#3B82F6")
  colorSecundario        String?                @default("#1E40AF")
  estado                 String?                @default("activo")
  estadoPago             String?                @default("pagado")
  fechaCreacion          DateTime               @default(now())
  ultimoPago             DateTime?
  proximoPago            DateTime?
  descripcion            String?
  contacto               String?
  rating                 Float?                 @default(4.5)
  stats                  String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  url                    String                 @unique @map("slug")
  fuente                 String?                @default("owner_dashboard")
  pendienteAprobacion    Boolean                @default(false)
  mensapiServiceEmail    String?
  mensapiServicePassword String?
  administradorId        String?
  administrador          User?                  @relation("ClinicaAdministrador", fields: [administradorId], references: [id])
  conversations          Conversation[]
  especialidades         Especialidad[]
  fichasMedicas          FichaMedica[]
  fichasMedicasHistorial FichaMedicaHistorial[] @relation("ClinicaFichaHistorial")
  horarios               Horario[]
  mediosPago             MedioPago[]
  mensajes               Mensaje[]
  notificaciones         Notificacion[]
  sucursales             Sucursal[]
  tratamientos           Tratamiento[]
  turnos                 Turno[]
  users                  User[]
  ventas                 Venta[]
  whatsappMessages       WhatsAppMessage[]
  whatsappTemplates      WhatsAppTemplate[]
}

model Mensaje {
  id        String   @id @default(cuid())
  asunto    String
  mensaje   String
  tipo      String
  leido     Boolean  @default(false)
  clinicaId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinica   Clinica? @relation(fields: [clinicaId], references: [id])
}

model Conversation {
  id            String        @id @default(cuid())
  name          String
  role          String
  avatar        String?
  stage         String        @default("prospectos")
  tags          String[]      @default([])
  isOnline      Boolean       @default(false)
  phone         String?
  email         String?
  unreadCount   Int           @default(0)
  clinicaId     String
  lastMessageAt DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  messages      ChatMessage[]
  clinica       Clinica       @relation(fields: [clinicaId], references: [id])
  turnos        Turno[]

  @@index([clinicaId])
  @@index([stage])
  @@index([lastMessageAt(sort: Desc)])
}

model ChatMessage {
  id                String           @id @default(cuid())
  content           String
  isFromUser        Boolean          @default(false)
  messageType       String           @default("text")
  status            String           @default("sent")
  conversationId    String
  userId            String?
  whatsappMessageId String?
  metadata          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  conversation      Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user              User?            @relation(fields: [userId], references: [id])
  whatsappMessage   WhatsAppMessage? @relation(fields: [whatsappMessageId], references: [id])

  @@index([conversationId])
  @@index([createdAt(sort: Desc)])
  @@index([status])
}

model Notificacion {
  id               String    @id @default(cuid())
  titulo           String
  mensaje          String
  tipo             String    @default("info")
  prioridad        String    @default("media")
  leida            Boolean   @default(false)
  clinicaId        String
  destinatarioId   String?
  fechaVencimiento DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  clinica          Clinica   @relation(fields: [clinicaId], references: [id])
  destinatario     User?     @relation("UserNotifications", fields: [destinatarioId], references: [id])
}

model User {
  id                    String                  @id @default(cuid())
  email                 String
  password              String
  name                  String?
  phone                 String?
  location              String?
  bio                   String?
  role                  Role
  clinicaId             String?
  estado                String?                 @default("activo")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  avatar_url            String?
  configuracion         String?
  facebook              String?
  instagram             String?
  website               String?
  whatsapp              String?
  username              String?                 @unique
  chatMessages          ChatMessage[]
  clinicasAdministradas Clinica[]               @relation("ClinicaAdministrador")
  fichasMedicasCreadas  FichaMedicaHistorial[]  @relation("FichaMedicaCreadaPor")
  notificaciones        Notificacion[]          @relation("UserNotifications")
  patient               Patient?
  professional          Professional?
  pushTokens            PushNotificationToken[]
  clinica               Clinica?                @relation(fields: [clinicaId], references: [id])
  whatsappMessages      WhatsAppMessage[]

  @@unique([email, clinicaId], name: "unique_email_per_clinica")
  @@index([email])
  @@index([username])
  @@index([clinicaId])
}

model Turno {
  id             String        @id @default(cuid())
  paciente       String
  email          String
  telefono       String?
  doctor         String
  fecha          DateTime
  hora           String
  estado         String        @default("pendiente")
  motivo         String?
  clinicaId      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversationId String?
  duracionMin    Int           @default(30)
  notas          String?
  professionalId String?
  servicio       String?
  ate            String?
  estadoPago     String        @default("pendiente")
  medioPago      String?
  montoTotal     String?
  origen         String?
  sucursal       String?
  montoAbonado   String?
  montoPendiente String?
  clinica        Clinica       @relation(fields: [clinicaId], references: [id])
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  professional   Professional? @relation(fields: [professionalId], references: [id])
}

model Patient {
  id                     String                 @id @default(uuid())
  userId                 String                 @unique
  name                   String
  birthDate              DateTime?
  phone                  String?
  notes                  String?
  createdAt              DateTime               @default(now())
  fichaMedica            FichaMedica?
  fichasMedicasHistorial FichaMedicaHistorial[] @relation("PatientFichaHistorial")
  user                   User                   @relation(fields: [userId], references: [id])
}

model Professional {
  id                 String                     @id @default(uuid())
  userId             String                     @unique
  name               String
  defaultDurationMin Int                        @default(30)
  bufferMin          Int                        @default(10)
  notes              String?
  createdAt          DateTime                   @default(now())
  sucursalId         String?
  agendas            Agenda[]
  sucursal           Sucursal?                  @relation(fields: [sucursalId], references: [id])
  user               User                       @relation(fields: [userId], references: [id])
  especialidades     ProfessionalEspecialidad[]
  tratamientos       ProfessionalTratamiento[]
  turnos             Turno[]
}

model Agenda {
  id             String       @id @default(uuid())
  professionalId String
  dia            String
  horaInicio     String
  horaFin        String
  duracionMin    Int
  createdAt      DateTime     @default(now())
  professional   Professional @relation(fields: [professionalId], references: [id])
}

model Horario {
  id        Int     @id @default(autoincrement())
  day       String
  openTime  String
  closeTime String
  clinicaId String
  clinica   Clinica @relation(fields: [clinicaId], references: [id])
}

model Especialidad {
  id            Int                        @id @default(autoincrement())
  name          String
  clinicaId     String
  clinica       Clinica                    @relation(fields: [clinicaId], references: [id])
  profesionales ProfessionalEspecialidad[]
}

model Tratamiento {
  id            String                    @id @default(cuid())
  name          String
  descripcion   String?
  duracionMin   Int                       @default(30)
  precio        Float?
  clinicaId     String
  estado        String                    @default("activo")
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  profesionales ProfessionalTratamiento[]
  clinica       Clinica                   @relation(fields: [clinicaId], references: [id], onDelete: Cascade)

  @@index([clinicaId])
  @@index([estado])
}

model ProfessionalEspecialidad {
  id             String       @id @default(cuid())
  professionalId String
  especialidadId Int
  createdAt      DateTime     @default(now())
  especialidad   Especialidad @relation(fields: [especialidadId], references: [id], onDelete: Cascade)
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@unique([professionalId, especialidadId])
  @@index([professionalId])
  @@index([especialidadId])
}

model ProfessionalTratamiento {
  id             String       @id @default(cuid())
  professionalId String
  tratamientoId  String
  precio         Float?
  duracionMin    Int?
  createdAt      DateTime     @default(now())
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  tratamiento    Tratamiento  @relation(fields: [tratamientoId], references: [id], onDelete: Cascade)

  @@unique([professionalId, tratamientoId])
  @@index([professionalId])
  @@index([tratamientoId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model PushNotificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  platform  String
  deviceId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([platform])
}

model WhatsAppMessage {
  id             String        @id @default(cuid())
  phoneNumberId  String
  to             String
  from           String
  messageType    String
  messageText    String?
  templateName   String?
  templateParams String?
  mediaUrl       String?
  mediaId        String?
  wamid          String?
  status         String        @default("pending")
  errorCode      String?
  errorMessage   String?
  clinicaId      String?
  userId         String?
  metadata       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  chatMessages   ChatMessage[]
  clinica        Clinica?      @relation(fields: [clinicaId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])

  @@index([to])
  @@index([status])
  @@index([clinicaId])
  @@index([userId])
  @@index([wamid])
}

model WhatsAppTemplate {
  id         String   @id @default(cuid())
  name       String
  language   String   @default("es")
  category   String
  status     String   @default("pending")
  components String
  example    String?
  clinicaId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  clinica    Clinica? @relation(fields: [clinicaId], references: [id])

  @@index([name])
  @@index([status])
  @@index([clinicaId])
}

model Contacto {
  id           String   @id @default(cuid())
  nombre       String
  email        String
  telefono     String?
  empresa      String?
  tipoConsulta String
  plan         String?
  mensaje      String
  estado       String   @default("nuevo")
  procesado    Boolean  @default(false)
  notas        String?
  metadata     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([estado])
  @@index([tipoConsulta])
  @@index([createdAt(sort: Desc)])
  @@index([email])
}

model WhatsAppWebhook {
  id        String   @id @default(cuid())
  eventType String
  payload   String
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([processed])
}

model Sucursal {
  id            String         @id @default(cuid())
  nombre        String
  direccion     String?
  telefono      String?
  email         String?
  estado        String         @default("activa")
  clinicaId     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ciudad        String?
  pais          String?
  provincia     String?
  professionals Professional[]
  clinica       Clinica        @relation(fields: [clinicaId], references: [id], onDelete: Cascade)

  @@index([clinicaId])
  @@index([estado])
}

model FichaMedica {
  id                           String                 @id @default(cuid())
  pacienteId                   String                 @unique
  clinicaId                    String
  grupoSanguineo               String?
  alergias                     String?
  medicamentosActuales         String?
  antecedentesPatologicos      String?
  antecedentesQuirurgicos      String?
  antecedentesFamiliares       String?
  habitos                      String?
  ocupacion                    String?
  motivoConsulta               String?
  sintomas                     String?
  diagnostico                  String?
  tratamiento                  String?
  evolucion                    String?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  tratamientosEsteticosPrevios String?
  archivosMedicos              ArchivoMedico[]
  clinica                      Clinica                @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  paciente                     Patient                @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  fichasMedicasHistorial       FichaMedicaHistorial[] @relation("PatientFichaHistorial")
  imagenesMedicas              ImagenMedica[]

  @@index([pacienteId])
  @@index([clinicaId])
}

model FichaMedicaHistorial {
  id                           String               @id @default(cuid())
  pacienteId                   String
  clinicaId                    String
  version                      Int
  fechaCreacion                DateTime             @default(now())
  creadoPor                    String?
  grupoSanguineo               String?
  ocupacion                    String?
  alergias                     String?
  medicamentosActuales         String?
  antecedentesPatologicos      String?
  antecedentesQuirurgicos      String?
  antecedentesFamiliares       String?
  habitos                      String?
  motivoConsulta               String?
  sintomas                     String?
  diagnostico                  String?
  tratamiento                  String?
  evolucion                    String?
  notasCambio                  String?
  esVersionActual              Boolean              @default(false)
  createdAt                    DateTime             @default(now())
  tratamientosEsteticosPrevios String?
  archivos                     FichaMedicaArchivo[]
  clinica                      Clinica              @relation("ClinicaFichaHistorial", fields: [clinicaId], references: [id], onDelete: Cascade, map: "FichaMedicaHistorial_clinicaId_fkey")
  creadoPorUser                User?                @relation("FichaMedicaCreadaPor", fields: [creadoPor], references: [id], map: "FichaMedicaHistorial_creadoPor_fkey")
  paciente                     Patient              @relation("PatientFichaHistorial", fields: [pacienteId], references: [id], onDelete: Cascade, map: "FichaMedicaHistorial_pacienteId_fkey")
  fichaMedica                  FichaMedica          @relation("PatientFichaHistorial", fields: [pacienteId], references: [pacienteId], onDelete: Cascade, map: "FichaMedicaHistorial_fichaMedica_fkey")

  @@index([pacienteId])
  @@index([clinicaId])
  @@index([version])
  @@index([esVersionActual])
  @@index([fechaCreacion])
}

model FichaMedicaArchivo {
  id                 String               @id @default(cuid())
  fichaHistorialId   String
  tipo               String
  nombre             String
  url                String
  descripcion        String?
  fechaSubida        DateTime             @default(now())
  microserviceFileId String?
  fichaHistorial     FichaMedicaHistorial @relation(fields: [fichaHistorialId], references: [id], onDelete: Cascade)

  @@index([fichaHistorialId])
  @@index([tipo])
}

model ArchivoMedico {
  id                 String      @id @default(cuid())
  fichaMedicaId      String
  nombre             String
  nombreArchivo      String
  tipo               String
  url                String
  tamañoBytes       BigInt?
  fechaSubida        DateTime    @default(now())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  microserviceFileId String?
  fichaMedica        FichaMedica @relation(fields: [fichaMedicaId], references: [id], onDelete: Cascade)

  @@index([fichaMedicaId])
}

model ImagenMedica {
  id                 String      @id @default(cuid())
  fichaMedicaId      String
  nombre             String
  nombreArchivo      String
  url                String
  descripcion        String?
  tamañoBytes       BigInt?
  fechaSubida        DateTime    @default(now())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  microserviceFileId String?
  fichaMedica        FichaMedica @relation(fields: [fichaMedicaId], references: [id], onDelete: Cascade)

  @@index([fichaMedicaId])
}

model MedioPago {
  id          String   @id @default(cuid())
  nombre      String
  descripcion String?
  activo      Boolean  @default(true)
  clinicaId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clinica     Clinica  @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  ventas      Venta[]

  @@unique([nombre, clinicaId])
  @@index([clinicaId])
  @@index([activo])
}

model Venta {
  id               String     @id @default(cuid())
  ventaId          String     @unique
  comprador        String
  paciente         String
  email            String
  telefono         String
  tratamiento      String
  profesional      String
  profesionalId    String?
  sucursal         String
  montoTotal       String
  montoAbonado     String
  montoPendiente   String
  estado           String     @default("activa")
  estadoPago       String     @default("pendiente")
  medioPago        String?
  origen           String?
  ate              String?
  sesiones         Int        @default(1)
  sesionesUsadas   Int        @default(0)
  fechaCreacion    DateTime   @default(now())
  fechaVencimiento DateTime?
  notas            String?
  clinicaId        String
  medioPagoId      String?
  clinica          Clinica    @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  medioPagoRel     MedioPago? @relation(fields: [medioPagoId], references: [id])

  @@index([clinicaId])
  @@index([estado])
  @@index([estadoPago])
  @@index([fechaCreacion])
  @@index([medioPagoId])
}

enum Role {
  PATIENT
  PROFESSIONAL
  ADMIN
  OWNER
  SECRETARY
}
