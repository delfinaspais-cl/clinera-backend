import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  console.log('üöÄ Iniciando aplicaci√≥n...');
  console.log('üîç DATABASE_URL presente:', !!process.env.DATABASE_URL);
  console.log('üîç NODE_ENV:', process.env.NODE_ENV);
  console.log('üîç PORT:', process.env.PORT);
  
  try {
    const app = await NestFactory.create(AppModule, {
      logger: ['error', 'warn', 'log'],
    });
    console.log('‚úÖ Aplicaci√≥n creada exitosamente');

    // Configuraci√≥n b√°sica de CORS
    app.enableCors({
      origin: true,
      credentials: true,
    });
    console.log('‚úÖ CORS habilitado');

    // Configuraci√≥n del puerto
    const port = process.env.PORT || 3000;
    console.log(`üîç Puerto configurado: ${port}`);
    
    await app.listen(port, '0.0.0.0');
    console.log(`‚úÖ Aplicaci√≥n ejecut√°ndose en puerto ${port}`);
    console.log(`‚úÖ Health check disponible en: http://0.0.0.0:${port}/`);
    console.log(`‚úÖ Health check detallado en: http://0.0.0.0:${port}/health`);
    
  } catch (error) {
    console.error('‚ùå Error cr√≠tico en bootstrap:', error.message);
    console.error('‚ùå Stack trace:', error.stack);
    
    // No hacer exit(1) inmediatamente, dar tiempo para que Railway vea el error
    setTimeout(() => {
      console.error('‚ùå Forzando salida despu√©s de timeout');
      process.exit(1);
    }, 5000);
  }
}

bootstrap();
