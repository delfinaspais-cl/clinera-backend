const https = require('https');

console.log('üîç PROBANDO ENDPOINT DE PACIENTES CON TOKEN DE PRUEBA');
console.log('======================================================\n');

function testEndpointWithToken() {
  const url = 'https://clinera-backend-production.up.railway.app/clinica/metodo-hebe/pacientes';
  
  console.log(`üåê Probando endpoint: ${url}`);
  console.log('üì° M√©todo: GET');
  console.log('üîê Token: test_token (token de prueba)');
  console.log('‚è≥ Esperando respuesta...\n');

  const options = {
    headers: {
      'Authorization': 'Bearer test_token',
      'Content-Type': 'application/json'
    }
  };

  const req = https.get(url, options, (res) => {
    console.log(`üìä Status Code: ${res.statusCode}`);
    console.log(`üìã Headers:`, JSON.stringify(res.headers, null, 2));
    console.log('');

    let data = '';

    res.on('data', (chunk) => {
      data += chunk;
    });

    res.on('end', () => {
      console.log('üìÑ Respuesta completa recibida:');
      console.log('================================');
      
      try {
        const jsonData = JSON.parse(data);
        console.log(JSON.stringify(jsonData, null, 2));
        
        if (res.statusCode === 200 && jsonData.success && jsonData.data) {
          console.log(`\n‚úÖ RESPUESTA EXITOSA:`);
          console.log(`   - Total de pacientes devueltos: ${jsonData.data.length}`);
          console.log(`   - Total de registros: ${jsonData.pagination?.total || 'N/A'}`);
          console.log(`   - P√°gina actual: ${jsonData.pagination?.page || 'N/A'}`);
          console.log(`   - Total de p√°ginas: ${jsonData.pagination?.totalPages || 'N/A'}`);
          
          if (jsonData.data.length === 0) {
            console.log('\n‚ö†Ô∏è PROBLEMA: La respuesta tiene success: true pero data est√° vac√≠o');
            console.log('üí° Esto explica por qu√© el frontend muestra "No hay pacientes registrados"');
          } else {
            console.log('\n‚úÖ Los datos est√°n llegando correctamente');
            console.log('üí° El problema est√° en el frontend o en el token que est√° enviando');
            console.log('\nüìã Muestra de pacientes (primeros 3):');
            jsonData.data.slice(0, 3).forEach((p, index) => {
              console.log(`     ${index + 1}. ID: ${p.id}, Nombre: ${p.name}, Email: ${p.email || 'N/A'}, Turnos: ${p.totalTurnos}`);
            });
          }
        } else if (res.statusCode === 401) {
          console.log('\n‚ùå A√öN 401 - El token de prueba no funciona');
          console.log('üí° Posibles causas:');
          console.log('   - El ENABLE_TEST_TOKEN no est√° configurado en Railway');
          console.log('   - El NODE_ENV no est√° configurado correctamente');
          console.log('   - El token de prueba fue deshabilitado');
        } else {
          console.log('\n‚ùå Respuesta inesperada');
        }
        
      } catch (error) {
        console.log('‚ùå Error parseando JSON:', error.message);
        console.log('üìÑ Respuesta raw:');
        console.log(data);
      }
    });
  });

  req.on('error', (error) => {
    console.error('‚ùå Error en la petici√≥n:', error.message);
  });

  req.setTimeout(30000, () => {
    console.log('‚è∞ Timeout - la petici√≥n tard√≥ m√°s de 30 segundos');
    req.destroy();
  });
}

testEndpointWithToken();
